package com.elle.elle_gui.presentation;

import static com.elle.elle_gui.presentation.LabelConstants.*;
import com.elle.elle_gui.admissions.Authorization;
import static com.elle.elle_gui.miscellaneous.TableConstants.*;
import com.elle.elle_gui.miscellaneous.LoggingAspect;
import static com.elle.elle_gui.miscellaneous.TableConstants.ACCOUNT_NAMES;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.text.AbstractDocument;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.Box;
import javax.swing.Timer;

/**
 * ELLE_GUI_Frame
 *
 * @author Carlos Igreja
 * @since 8-14-2015
 * @version ELLE_GUI-0.6.9
 */
public class ELLE_GUI_Frame extends JFrame {

    public static String creationDate;  // set automatically from manifest
    public static String version;       // set automatically from manifest
    
    // attributes
    private Map<String, Tab> tabs; // stores individual Tab objects mapped to their accountName
    private String database;
    private String server;
    private String currentTabName; //stores the name of the  currently selected tab
    
 
    // components
    private static ELLE_GUI_Frame instance;
    private LogWindow logWindow;
    private LoginWindow loginWindow;
    private ATrade aTradeInView;
    private ViewATradeWindow viewATradeWindow;
    private final TableColumnAlert tableColumnAlert;

    // button colors
    private Color colorBtnDefault;
    private Color colorBtnSelected;
    
    // create a jlabel to show the database and server used
    private JLabel databaseLabel;
    
    //listens for when a table record is selected/unselected
    //used to enable/disable menuItemAViewATrades 
    PropertyChangeListener recordSelectedListener;
    
    //Listens for a change in Tab attribute recordsChanged 
    PropertyChangeListener recordsChangedListener;
    
    PropertyChangeListener logWindowClosedListener;

    /**
     * ELLE_GUI_Frame Creates the ELLE_GUI_Frame which is the main window of the
     * application
     */
    public ELLE_GUI_Frame() {
        initComponents();
        setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        setTitle("Elle GUI");
     
        instance = this;                         // this is used to call this instance of ELLE_GUI 
        colorBtnDefault = btnPositions.getBackground();
        colorBtnSelected = Color.RED;
        
        // initialize tabs
        tabs = new HashMap<>();
        initTabs();
        
       
        // hide sql panel by default
        panelSQL.setVisible(false);
        this.setSize(this.getWidth(), 493);

        //initialize currentTab
        currentTabName = IB9048_ACCOUNT_NAME;
        // show IB9048 positions table (initial start up) and set the table buttons accordingly
        selectTable(POSITIONS_TABLE_NAME);

        // start table with positions button selected
        //btnPositions.requestFocus();

        
        //Create a new TableColumnAlert object with the unexpected and missing columns from each table
        tableColumnAlert = new TableColumnAlert(getSelectedTab()
                .getUnexpectedColumns(), getSelectedTab().getMissingColumns());
                
       
        //gray out the existing three tabs in other menu
        menuItemIB8949.setEnabled(false);
        menuItemReconcile.setEnabled(false);
        menuItemTL8949.setEnabled(false);
        
       //Initializes recordSelectionListener with a property change listener which listens for 
       //when a table record is selected/unselected
        //and enables/disables menuItemAViewATrades 
        setRecordSelectedListener();
        
        //Initializes recordsChangeListener with a property change listener which listens for
        // changes in Tab attribute recordsChanged
        setRecordsChangedListener();
        
        
        Authorization.authorize(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        filechooser = new javax.swing.JFileChooser();
        panelCTRLPanel = new javax.swing.JPanel();
        btnTrades = new javax.swing.JButton();
        btnAllocations = new javax.swing.JButton();
        btnSymbol = new javax.swing.JButton();
        btnDateRange = new javax.swing.JButton();
        checkBoxSymbol = new javax.swing.JCheckBox();
        checkBoxDateRange = new javax.swing.JCheckBox();
        labelHyphen = new javax.swing.JLabel();
        textFieldSymbol = new javax.swing.JTextField();
        textFieldStartDate = new javax.swing.JTextField();
        textFieldEndDate = new javax.swing.JTextField();
        btnPositions = new javax.swing.JButton();
        labelRecordsShown = new javax.swing.JLabel();
        btnTableDisplayState = new javax.swing.JLabel();
        btnClearAllFilters = new java.awt.Button();
        labelTotalRecords = new javax.swing.JLabel();
        panelSQL = new javax.swing.JPanel();
        scrollPaneSQL = new javax.swing.JScrollPane();
        textAreaSQL = new javax.swing.JTextArea();
        btnEnterSQL = new javax.swing.JButton();
        btnClearSQL = new javax.swing.JButton();
        btnShowTables = new javax.swing.JButton();
        panelAccounts = new javax.swing.JPanel();
        tabbedPaneAccounts = new javax.swing.JTabbedPane();
        panelIB9048 = new javax.swing.JPanel();
        scrollPaneIB9048 = new javax.swing.JScrollPane();
        tableIB9048 = new javax.swing.JTable();
        panelTOS3622 = new javax.swing.JPanel();
        scrollPaneTOS3622 = new javax.swing.JScrollPane();
        tableTOS3622 = new javax.swing.JTable();
        panelCombined = new javax.swing.JPanel();
        scrollPaneCombined = new javax.swing.JScrollPane();
        tableCombined = new javax.swing.JTable();
        informationLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemVersion = new javax.swing.JMenuItem();
        menuItemRead = new javax.swing.JMenuItem();
        menuPrint = new javax.swing.JMenu();
        menuItemPrintGUI = new javax.swing.JMenuItem();
        menuItemPrintDisplayWindow = new javax.swing.JMenuItem();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemLogOut = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuItemConnection = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuConnections = new javax.swing.JMenu();
        menuItemAWS = new javax.swing.JMenuItem();
        menuItemPupone = new javax.swing.JMenuItem();
        menuItemLocal = new javax.swing.JMenuItem();
        menuFind = new javax.swing.JMenu();
        menuReports = new javax.swing.JMenu();
        menuTools = new javax.swing.JMenu();
        menuItemBackup = new javax.swing.JMenuItem();
        menuItemReloadTabData = new javax.swing.JMenuItem();
        menuLoad = new javax.swing.JMenu();
        menuItemLoadFile = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuView = new javax.swing.JMenu();
        menuItemCheckBoxLog = new javax.swing.JCheckBoxMenuItem();
        menuItemCheckBoxSQL = new javax.swing.JCheckBoxMenuItem();
        menuItemAViewATrades = new javax.swing.JMenuItem();
        menuItemIB = new javax.swing.JMenuItem();
        menuItemTL = new javax.swing.JMenuItem();
        menuItemLoadsTable = new javax.swing.JMenuItem();
        viewmatches = new javax.swing.JMenuItem();
        viewnomatches = new javax.swing.JMenuItem();
        menuItemDefaultColumnWidths = new javax.swing.JMenuItem();
        menuOther = new javax.swing.JMenu();
        menuItemIB8949 = new javax.swing.JMenuItem();
        menuItemReconcile = new javax.swing.JMenuItem();
        menuItemTL8949 = new javax.swing.JMenuItem();

        filechooser.setDialogTitle("Open from files...");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelCTRLPanel.setLayout(new java.awt.GridBagLayout());

        btnTrades.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/elle/elle_gui/images/button1.png"))); // NOI18N
        btnTrades.setText("Trades");
        btnTrades.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTrades.setMaximumSize(new java.awt.Dimension(88, 52));
        btnTrades.setMinimumSize(new java.awt.Dimension(88, 52));
        btnTrades.setPreferredSize(new java.awt.Dimension(88, 52));
        btnTrades.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTradesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 16);
        panelCTRLPanel.add(btnTrades, gridBagConstraints);

        btnAllocations.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/elle/elle_gui/images/button3.png"))); // NOI18N
        btnAllocations.setText("Allocations");
        btnAllocations.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAllocations.setMaximumSize(new java.awt.Dimension(88, 52));
        btnAllocations.setMinimumSize(new java.awt.Dimension(88, 52));
        btnAllocations.setPreferredSize(new java.awt.Dimension(88, 52));
        btnAllocations.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAllocations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllocationsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 16);
        panelCTRLPanel.add(btnAllocations, gridBagConstraints);

        btnSymbol.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/elle/elle_gui/images/filter.png"))); // NOI18N
        btnSymbol.setText(" ");
        btnSymbol.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSymbol.setMaximumSize(new java.awt.Dimension(35, 33));
        btnSymbol.setMinimumSize(new java.awt.Dimension(35, 33));
        btnSymbol.setPreferredSize(new java.awt.Dimension(35, 33));
        btnSymbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSymbolActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 12, 0, 0);
        panelCTRLPanel.add(btnSymbol, gridBagConstraints);

        btnDateRange.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/elle/elle_gui/images/filter.png"))); // NOI18N
        btnDateRange.setText(" ");
        btnDateRange.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDateRange.setIconTextGap(0);
        btnDateRange.setMaximumSize(new java.awt.Dimension(35, 33));
        btnDateRange.setMinimumSize(new java.awt.Dimension(35, 33));
        btnDateRange.setPreferredSize(new java.awt.Dimension(35, 33));
        btnDateRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDateRangeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 6, 0, 10);
        panelCTRLPanel.add(btnDateRange, gridBagConstraints);

        checkBoxSymbol.setText("Symbol");
        checkBoxSymbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxSymbolActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 0, 0);
        panelCTRLPanel.add(checkBoxSymbol, gridBagConstraints);

        checkBoxDateRange.setText("Date Range");
        checkBoxDateRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxDateRangeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 50, 0, 0);
        panelCTRLPanel.add(checkBoxDateRange, gridBagConstraints);

        labelHyphen.setText("-");
        labelHyphen.setMaximumSize(new java.awt.Dimension(4, 30));
        labelHyphen.setMinimumSize(new java.awt.Dimension(4, 30));
        labelHyphen.setPreferredSize(new java.awt.Dimension(4, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 6, 0, 6);
        panelCTRLPanel.add(labelHyphen, gridBagConstraints);

        textFieldSymbol.setMaximumSize(new java.awt.Dimension(95, 30));
        textFieldSymbol.setMinimumSize(new java.awt.Dimension(95, 30));
        textFieldSymbol.setPreferredSize(new java.awt.Dimension(95, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        panelCTRLPanel.add(textFieldSymbol, gridBagConstraints);

        textFieldStartDate.setMaximumSize(new java.awt.Dimension(95, 30));
        textFieldStartDate.setMinimumSize(new java.awt.Dimension(95, 30));
        textFieldStartDate.setPreferredSize(new java.awt.Dimension(95, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 0, 0);
        panelCTRLPanel.add(textFieldStartDate, gridBagConstraints);

        textFieldEndDate.setMaximumSize(new java.awt.Dimension(95, 30));
        textFieldEndDate.setMinimumSize(new java.awt.Dimension(95, 30));
        textFieldEndDate.setPreferredSize(new java.awt.Dimension(95, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        panelCTRLPanel.add(textFieldEndDate, gridBagConstraints);

        btnPositions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/elle/elle_gui/images/button1.png"))); // NOI18N
        btnPositions.setText("Positions");
        btnPositions.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPositions.setMaximumSize(new java.awt.Dimension(88, 52));
        btnPositions.setMinimumSize(new java.awt.Dimension(88, 52));
        btnPositions.setPreferredSize(new java.awt.Dimension(88, 52));
        btnPositions.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPositions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPositionsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 16);
        panelCTRLPanel.add(btnPositions, gridBagConstraints);

        labelRecordsShown.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelRecordsShown.setText("records shown label");
        labelRecordsShown.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        panelCTRLPanel.add(labelRecordsShown, gridBagConstraints);

        btnTableDisplayState.setForeground(new java.awt.Color(51, 153, 0));
        btnTableDisplayState.setText("Default Views");
        btnTableDisplayState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTableDisplayStateMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        panelCTRLPanel.add(btnTableDisplayState, gridBagConstraints);

        btnClearAllFilters.setActionCommand("Clear All Filters");
        btnClearAllFilters.setLabel("Clear All Filters");
        btnClearAllFilters.setMinimumSize(new java.awt.Dimension(99, 28));
        btnClearAllFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllFiltersActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 50, 0, 10);
        panelCTRLPanel.add(btnClearAllFilters, gridBagConstraints);

        labelTotalRecords.setText("total records label");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panelCTRLPanel.add(labelTotalRecords, gridBagConstraints);

        panelSQL.setLayout(new java.awt.GridBagLayout());

        scrollPaneSQL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        textAreaSQL.setBackground(new java.awt.Color(153, 255, 204));
        textAreaSQL.setColumns(20);
        textAreaSQL.setRows(5);
        textAreaSQL.setText("Please input an SQL statement:\n>>");
        textAreaSQL.setText("Please input an SQL statement:\n>>");
        ((AbstractDocument) textAreaSQL.getDocument())
        .setDocumentFilter(new CreateDocumentFilter(33));
        scrollPaneSQL.setViewportView(textAreaSQL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1157;
        gridBagConstraints.ipady = 73;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        panelSQL.add(scrollPaneSQL, gridBagConstraints);

        btnEnterSQL.setText("Enter");
        btnEnterSQL.setMaximumSize(new java.awt.Dimension(93, 23));
        btnEnterSQL.setMinimumSize(new java.awt.Dimension(93, 23));
        btnEnterSQL.setPreferredSize(new java.awt.Dimension(93, 23));
        btnEnterSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterSQLActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        panelSQL.add(btnEnterSQL, gridBagConstraints);

        btnClearSQL.setText("Clear");
        btnClearSQL.setMaximumSize(new java.awt.Dimension(93, 23));
        btnClearSQL.setMinimumSize(new java.awt.Dimension(93, 23));
        btnClearSQL.setPreferredSize(new java.awt.Dimension(93, 23));
        btnClearSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSQLActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 0, 9);
        panelSQL.add(btnClearSQL, gridBagConstraints);

        btnShowTables.setText("Show Tables");
        btnShowTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowTablesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 0);
        panelSQL.add(btnShowTables, gridBagConstraints);

        panelAccounts.setMinimumSize(new java.awt.Dimension(400, 200));
        panelAccounts.setPreferredSize(new java.awt.Dimension(1200, 400));
        panelAccounts.setLayout(new java.awt.GridBagLayout());

        tabbedPaneAccounts.setMinimumSize(new java.awt.Dimension(400, 200));
        tabbedPaneAccounts.setPreferredSize(new java.awt.Dimension(1200, 400));
        tabbedPaneAccounts.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneAccountsStateChanged(evt);
            }
        });

        panelIB9048.setMinimumSize(new java.awt.Dimension(400, 200));
        panelIB9048.setPreferredSize(new java.awt.Dimension(1200, 400));

        scrollPaneIB9048.setMinimumSize(new java.awt.Dimension(400, 200));
        scrollPaneIB9048.setPreferredSize(new java.awt.Dimension(1200, 400));

        tableIB9048.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableIB9048.setMinimumSize(new java.awt.Dimension(400, 200));
        tableIB9048.setPreferredSize(new java.awt.Dimension(1200, 400));
        scrollPaneIB9048.setViewportView(tableIB9048);

        javax.swing.GroupLayout panelIB9048Layout = new javax.swing.GroupLayout(panelIB9048);
        panelIB9048.setLayout(panelIB9048Layout);
        panelIB9048Layout.setHorizontalGroup(
            panelIB9048Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIB9048Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneIB9048, javax.swing.GroupLayout.PREFERRED_SIZE, 1360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelIB9048Layout.setVerticalGroup(
            panelIB9048Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIB9048Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(scrollPaneIB9048, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabbedPaneAccounts.addTab(IB9048_ACCOUNT_NAME, panelIB9048);

        scrollPaneTOS3622.setPreferredSize(new java.awt.Dimension(1300, 402));

        tableTOS3622.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPaneTOS3622.setViewportView(tableTOS3622);

        javax.swing.GroupLayout panelTOS3622Layout = new javax.swing.GroupLayout(panelTOS3622);
        panelTOS3622.setLayout(panelTOS3622Layout);
        panelTOS3622Layout.setHorizontalGroup(
            panelTOS3622Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1195, Short.MAX_VALUE)
            .addGroup(panelTOS3622Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scrollPaneTOS3622, javax.swing.GroupLayout.DEFAULT_SIZE, 1195, Short.MAX_VALUE))
        );
        panelTOS3622Layout.setVerticalGroup(
            panelTOS3622Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
            .addGroup(panelTOS3622Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelTOS3622Layout.createSequentialGroup()
                    .addComponent(scrollPaneTOS3622, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        tabbedPaneAccounts.addTab(TOS3622_ACCOUNT_NAME, panelTOS3622);

        scrollPaneCombined.setPreferredSize(new java.awt.Dimension(1200, 400));

        tableCombined.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableCombined.setMinimumSize(new java.awt.Dimension(1200, 400));
        tableCombined.setPreferredSize(new java.awt.Dimension(1200, 400));
        scrollPaneCombined.setViewportView(tableCombined);

        javax.swing.GroupLayout panelCombinedLayout = new javax.swing.GroupLayout(panelCombined);
        panelCombined.setLayout(panelCombinedLayout);
        panelCombinedLayout.setHorizontalGroup(
            panelCombinedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1195, Short.MAX_VALUE)
            .addGroup(panelCombinedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scrollPaneCombined, javax.swing.GroupLayout.DEFAULT_SIZE, 1195, Short.MAX_VALUE))
        );
        panelCombinedLayout.setVerticalGroup(
            panelCombinedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
            .addGroup(panelCombinedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelCombinedLayout.createSequentialGroup()
                    .addComponent(scrollPaneCombined, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        tabbedPaneAccounts.addTab(COMBINED_ACCOUNT_NAME , panelCombined);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        panelAccounts.add(tabbedPaneAccounts, gridBagConstraints);

        informationLabel.setText("Information Label");
        informationLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        informationLabel.setMaximumSize(new java.awt.Dimension(250, 14));
        informationLabel.setMinimumSize(new java.awt.Dimension(200, 14));
        informationLabel.setOpaque(true);
        informationLabel.setPreferredSize(new java.awt.Dimension(250, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 0);
        panelAccounts.add(informationLabel, gridBagConstraints);

        menuBar.setMargin(new java.awt.Insets(0, 0, 0, 5));

        menuFile.setText("File");

        menuItemVersion.setText("Version");
        menuItemVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemVersionActionPerformed(evt);
            }
        });
        menuFile.add(menuItemVersion);

        menuItemRead.setText("Read from CSV File");
        menuItemRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReadActionPerformed(evt);
            }
        });
        menuFile.add(menuItemRead);

        menuPrint.setText("Print");

        menuItemPrintGUI.setText("Print GUI");
        menuItemPrintGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPrintGUIActionPerformed(evt);
            }
        });
        menuPrint.add(menuItemPrintGUI);

        menuItemPrintDisplayWindow.setText("Print Display Window");
        menuItemPrintDisplayWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPrintDisplayWindowActionPerformed(evt);
            }
        });
        menuPrint.add(menuItemPrintDisplayWindow);

        menuFile.add(menuPrint);

        menuItemSave.setText("Save Tab to CSV");
        menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSave);

        menuItemLogOut.setText("Log out");
        menuItemLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLogOutActionPerformed(evt);
            }
        });
        menuFile.add(menuItemLogOut);

        menuBar.add(menuFile);

        menuEdit.setText("Edit");

        menuItemConnection.setText("Connection...");
        menuItemConnection.setEnabled(false);
        menuItemConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemConnectionActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemConnection);

        jMenuItem1.setText("Manage DB");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuEdit.add(jMenuItem1);

        menuConnections.setText("Select Connections");

        menuItemAWS.setText("AWS");
        menuItemAWS.setEnabled(false);
        menuItemAWS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAWSActionPerformed(evt);
            }
        });
        menuConnections.add(menuItemAWS);

        menuItemPupone.setText("Pupone");
        menuItemPupone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPuponeActionPerformed(evt);
            }
        });
        menuConnections.add(menuItemPupone);

        menuItemLocal.setText("Local");
        menuItemLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLocalActionPerformed(evt);
            }
        });
        menuConnections.add(menuItemLocal);

        menuEdit.add(menuConnections);

        menuBar.add(menuEdit);

        menuFind.setText("Find");
        menuBar.add(menuFind);

        menuReports.setText("Reports");
        menuBar.add(menuReports);

        menuTools.setText("Tools");

        menuItemBackup.setText("Backup Tables");
        menuItemBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemBackupActionPerformed(evt);
            }
        });
        menuTools.add(menuItemBackup);

        menuItemReloadTabData.setText("Reload Tab Data");
        menuItemReloadTabData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReloadTabDataActionPerformed(evt);
            }
        });
        menuTools.add(menuItemReloadTabData);

        menuBar.add(menuTools);

        menuLoad.setText("Load");

        menuItemLoadFile.setText("Load File...");
        menuItemLoadFile.setEnabled(false);
        menuItemLoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoadFileActionPerformed(evt);
            }
        });
        menuLoad.add(menuItemLoadFile);

        menuBar.add(menuLoad);

        menuHelp.setText("Help");
        menuBar.add(menuHelp);

        menuView.setText("View");

        menuItemCheckBoxLog.setText("Log");
        menuItemCheckBoxLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCheckBoxLogActionPerformed(evt);
            }
        });
        menuView.add(menuItemCheckBoxLog);

        menuItemCheckBoxSQL.setText("SQL Command");
        menuItemCheckBoxSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCheckBoxSQLActionPerformed(evt);
            }
        });
        menuView.add(menuItemCheckBoxSQL);

        menuItemAViewATrades.setText("Display Record");
        menuItemAViewATrades.setToolTipText("");
        menuItemAViewATrades.setEnabled(false);
        menuItemAViewATrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAViewATradesActionPerformed(evt);
            }
        });
        menuView.add(menuItemAViewATrades);

        menuItemIB.setText("Display IB_8949-All Fields");
        menuItemIB.setEnabled(false);
        menuItemIB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemIBActionPerformed(evt);
            }
        });
        menuView.add(menuItemIB);

        menuItemTL.setText("Display TL_8949-All Fields");
        menuItemTL.setEnabled(false);
        menuItemTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTLActionPerformed(evt);
            }
        });
        menuView.add(menuItemTL);

        menuItemLoadsTable.setText("Display Loads Table");
        menuItemLoadsTable.setEnabled(false);
        menuItemLoadsTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoadsTableActionPerformed(evt);
            }
        });
        menuView.add(menuItemLoadsTable);

        viewmatches.setText("View Matches");
        viewmatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewmatchesActionPerformed(evt);
            }
        });
        menuView.add(viewmatches);

        viewnomatches.setText("View noMatches");
        viewnomatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewnomatchesActionPerformed(evt);
            }
        });
        menuView.add(viewnomatches);

        menuItemDefaultColumnWidths.setText("Default Column Widths");
        menuItemDefaultColumnWidths.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDefaultColumnWidthsActionPerformed(evt);
            }
        });
        menuView.add(menuItemDefaultColumnWidths);

        menuBar.add(menuView);

        menuOther.setText("Other");

        menuItemIB8949.setText("IB 8949");
        menuItemIB8949.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemIB8949ActionPerformed(evt);
            }
        });
        menuOther.add(menuItemIB8949);

        menuItemReconcile.setText("Reconcile 8949s");
        menuItemReconcile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReconcileActionPerformed(evt);
            }
        });
        menuOther.add(menuItemReconcile);

        menuItemTL8949.setText("TL 8949");
        menuItemTL8949.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTL8949ActionPerformed(evt);
            }
        });
        menuOther.add(menuItemTL8949);

        menuBar.add(menuOther);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSQL, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(panelAccounts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelCTRLPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelCTRLPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelAccounts, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSQL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelAccounts.getAccessibleContext().setAccessibleParent(panelAccounts);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTradesActionPerformed
        selectTable(TRADES_TABLE_NAME);
    }//GEN-LAST:event_btnTradesActionPerformed

    private void menuItemPuponeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPuponeActionPerformed

        loginWindow = new LoginWindow();
        loginWindow.setLocationRelativeTo(this);
        loginWindow.setVisible(true);
    }//GEN-LAST:event_menuItemPuponeActionPerformed

    private void menuItemLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLocalActionPerformed

        loginWindow = new LoginWindow();
        loginWindow.setLocationRelativeTo(this);
        loginWindow.setVisible(true);
    }//GEN-LAST:event_menuItemLocalActionPerformed

    private void menuItemAWSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAWSActionPerformed

    }//GEN-LAST:event_menuItemAWSActionPerformed
                                                                                    
    private void menuItemReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReadActionPerformed

        int returnVal = filechooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            String filename = file.getName();
            String extension = filename.substring(filename.lastIndexOf("."), filename.length());

            if (!".csv".equals(extension)) {
                JOptionPane.showMessageDialog(filechooser, "Invalid file type!!! Please choose a csv file!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                //creates a table of the file's data and displays it in a window
                CSV_File_Reader.getInstance().readCSV(file);
            }
        }
    }//GEN-LAST:event_menuItemReadActionPerformed

    private void menuItemPrintGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPrintGUIActionPerformed

        print(this);
    }//GEN-LAST:event_menuItemPrintGUIActionPerformed

    private void menuItemPrintDisplayWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPrintDisplayWindowActionPerformed

        // this should print table actually
        print(panelAccounts);

    }//GEN-LAST:event_menuItemPrintDisplayWindowActionPerformed

    private void menuItemLoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLoadFileActionPerformed

    }//GEN-LAST:event_menuItemLoadFileActionPerformed

    private void btnAllocationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllocationsActionPerformed
       selectTable(ALLOCATIONS_TABLE_NAME);
       
    }//GEN-LAST:event_btnAllocationsActionPerformed

    private void menuItemIBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemIBActionPerformed

    }//GEN-LAST:event_menuItemIBActionPerformed

    private void menuItemTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTLActionPerformed

    }//GEN-LAST:event_menuItemTLActionPerformed

    private void menuItemLoadsTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLoadsTableActionPerformed

    }//GEN-LAST:event_menuItemLoadsTableActionPerformed

    private void menuItemConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemConnectionActionPerformed

    }//GEN-LAST:event_menuItemConnectionActionPerformed

    private void menuItemReconcileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReconcileActionPerformed

    }//GEN-LAST:event_menuItemReconcileActionPerformed

    private void btnSymbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSymbolActionPerformed

        applySymbolSearchFilter();

    }//GEN-LAST:event_btnSymbolActionPerformed

    private void btnDateRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDateRangeActionPerformed

        applyDateRangeFilter();
    }//GEN-LAST:event_btnDateRangeActionPerformed

    

    /**
     * btnEnterSQLActionPerformed
     *
     * @param evt
     */
    private void btnEnterSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterSQLActionPerformed

        int commandStart = textAreaSQL.getText().lastIndexOf(">>") + 2;
        String command = textAreaSQL.getText().substring(commandStart);
        
        if (command.toLowerCase().trim().startsWith("select")
                || command.toLowerCase().trim().startsWith("show")
                || command.toLowerCase().trim().startsWith("describe")){
           
                
            TableDataDisplay.getInstance().displayTableFromSQL(command, this);
        }
        else{
            String msg = "Only select, show, or describe commands are allowed.";
            JOptionPane.showMessageDialog(this, msg);
        }
        

    }//GEN-LAST:event_btnEnterSQLActionPerformed

    private void btnClearSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSQLActionPerformed

        ((AbstractDocument) textAreaSQL.getDocument())
                .setDocumentFilter(new CreateDocumentFilter(0));
        textAreaSQL.setText("Please input an SQL statement:\n>>");
        ((AbstractDocument) textAreaSQL.getDocument())
                .setDocumentFilter(new CreateDocumentFilter(33));
    }//GEN-LAST:event_btnClearSQLActionPerformed

    private void menuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save File As");
        int userSelection = fileChooser.showSaveDialog(this);
        
        
        JTable selectedTable =  getSelectedTab().getSelectedTable();
       TableModel model = selectedTable.getModel();

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            try {
                FileWriter writer = new FileWriter(fileChooser.getSelectedFile() + ".csv");

                for (int i = 0; i < model.getColumnCount(); i++) {
                    if (model.getColumnName(i) == null) {
                        writer.write("" + ",");
                    } else {
                        writer.write(model.getColumnName(i) + ",");
                    }
                }
                
                writer.write("\n");
                
                for (int i = 0; i < model.getRowCount(); i++) {
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        if (model.getValueAt(i, j) == null) {
                            writer.write("" + ",");
                        } else {
                            writer.write(model.getValueAt(i, j).toString() + ",");
                        }
                    }
                    writer.write("\n");
                }
                writer.close();
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(selectedTable, "Error Writing File.\nFile may be in use by another application."
                        + "\nCheck and try re-exporting", "Export Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemSaveActionPerformed

    private void checkBoxDateRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxDateRangeActionPerformed

        if (checkBoxDateRange.isSelected()) {
            applyDateRangeFilter();
        } 
        else {
            getSelectedTab().removeFilter("date");
            
            // remove checkbox selection
            checkBoxDateRange.setSelected(false);
        }
    }//GEN-LAST:event_checkBoxDateRangeActionPerformed

    private void checkBoxSymbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxSymbolActionPerformed
        
        if (checkBoxSymbol.isSelected()) {
            applySymbolSearchFilter();
        } else {
            
            getSelectedTab().removeFilter("symbol");
            
            //remove checkbox selection
             checkBoxSymbol.setSelected(false);
        }
    }//GEN-LAST:event_checkBoxSymbolActionPerformed

    private void btnClearAllFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllFiltersActionPerformed
       //clear all filters
        getSelectedTab().clearAllFilters();        

        // apply checkbox selection
        checkBoxDateRange.setSelected(false);
        checkBoxSymbol.setSelected(false);
    }//GEN-LAST:event_btnClearAllFiltersActionPerformed

    private void menuItemIB8949ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemIB8949ActionPerformed

    }//GEN-LAST:event_menuItemIB8949ActionPerformed

    private void menuItemTL8949ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTL8949ActionPerformed

    }//GEN-LAST:event_menuItemTL8949ActionPerformed

    private void btnPositionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPositionsActionPerformed
        //set the positions table as the selected table 
        selectTable(POSITIONS_TABLE_NAME);
    }//GEN-LAST:event_btnPositionsActionPerformed

    private void menuItemCheckBoxSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCheckBoxSQLActionPerformed
        /**
         * ************* Strange behavior ************************* The
         * jPanelSQL.getHeight() is the height before the
         * jCheckBoxMenuItemViewSQLActionPerformed method was called.
         *
         * The jPanelSQL.setVisible() does not change the size of the sql panel
         * after it is executed.
         *
         * The jPanel size will only change after the
         * jCheckBoxMenuItemViewSQLActionPerformed is finished.
         *
         * That is why the the actual integer is used rather than getHeight().
         *
         * Example: jPanelSQL.setVisible(true); jPanelSQL.getHeight(); // this
         * returns 0
         */

        if (menuItemCheckBoxSQL.isSelected()) {

            // show sql panel
            panelSQL.setVisible(true);
            this.setSize(this.getWidth(), 493 + 128);

        } else {

            // hide sql panel
            panelSQL.setVisible(false);
            this.setSize(this.getWidth(), 493);
        }
    }//GEN-LAST:event_menuItemCheckBoxSQLActionPerformed

    private void menuItemCheckBoxLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCheckBoxLogActionPerformed
        if (menuItemCheckBoxLog.isSelected()) {
            
            logWindow.setLocationRelativeTo(this);
            logWindow.setVisible(true); // show log window

        } else {
            // hide log window
            logWindow.setVisible(false);
        }
    }//GEN-LAST:event_menuItemCheckBoxLogActionPerformed

    private void tabbedPaneAccountsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneAccountsStateChanged
        // called by init components so just skip if tabs is null
        if (tabs != null) {
            //display the table that was displayed(and is selected) in the previously selected Tab
            String selectedTableName = tabs.get(currentTabName).getSelectedTableName();
             
            //set the currentTab to be the selected tab
            currentTabName = getSelectedTabName();
            
            switch (selectedTableName) {
                case POSITIONS_TABLE_NAME:
                     selectTable(POSITIONS_TABLE_NAME);
                     break;
                case TRADES_TABLE_NAME:
                    selectTable(TRADES_TABLE_NAME);
                    break;
                case ALLOCATIONS_TABLE_NAME:
                    selectTable(ALLOCATIONS_TABLE_NAME);
                    break;
                default:
                    break;
            }
        }
    }//GEN-LAST:event_tabbedPaneAccountsStateChanged

    private void menuItemAViewATradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAViewATradesActionPerformed
         JTable selectedTable = getSelectedTab().getSelectedTable();
        String tableName = getSelectedTab().getSelectedTableName();
        int row = selectedTable.getSelectedRow();
        aTradeInView = new ATrade(row, selectedTable);
        viewATradeWindow = new ViewATradeWindow(aTradeInView, tableName, this);
        viewATradeWindow.setVisible(true);
    }//GEN-LAST:event_menuItemAViewATradesActionPerformed

    /**
     * This method is invoked when the label is clicked for default views
     * @param evt 
     */
    private void btnTableDisplayStateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTableDisplayStateMouseClicked
        
        /**
         * toggle design [all fields, default view]
         */
        
        Tab tab = getSelectedTab();
        JLabel viewLabel = (JLabel) evt.getComponent();

        if (viewLabel.getText().equals(VIEW_LABEL_TXT_ALL_FIELDS)) {
            tab.setView(VIEW_LABEL_TXT_DEFAULT_VIEW);
            tab.setAllFields(false);
        }
        else{
            tab.setView(VIEW_LABEL_TXT_ALL_FIELDS);
            tab.setAllFields(true);  
        }
        btnTableDisplayState.setText(tab.getView());
        displaySelectedTable();
    }//GEN-LAST:event_btnTableDisplayStateMouseClicked

    private void menuItemBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemBackupActionPerformed

        BackupDBTablesDialog backupDBTables = new BackupDBTablesDialog(this);
    }//GEN-LAST:event_menuItemBackupActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        EditDatabaseWindow editDBWindow = new EditDatabaseWindow();
        editDBWindow.setLocationRelativeTo(this);
        editDBWindow.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnShowTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowTablesActionPerformed
        String sqlCommand = "show tables;";
        TableDataDisplay.getInstance().displayTableFromSQL(sqlCommand, this);
    }//GEN-LAST:event_btnShowTablesActionPerformed

    private void viewmatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewmatchesActionPerformed
        TableDataDisplay.getInstance().displayTable("matches", this);
    }//GEN-LAST:event_viewmatchesActionPerformed

    private void viewnomatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewnomatchesActionPerformed
        TableDataDisplay.getInstance().displayTable("noMatches", this); 
    }//GEN-LAST:event_viewnomatchesActionPerformed

    private void menuItemReloadTabDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReloadTabDataActionPerformed
       reloadDataAction();
    }//GEN-LAST:event_menuItemReloadTabDataActionPerformed

    /**
     * 
     * @param evt 
     */
    private void menuItemLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLogOutActionPerformed
              Object[] options = {"Reconnect", "Log Out"};  // the titles of buttons

        int n = JOptionPane.showOptionDialog(this, "Would you like to reconnect?", "Log off",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, //do not use a custom Icon
                options, //the titles of buttons
                options[0]); //default button title

        switch (n) {
            case 0: {               // Reconnect

                // create a new Login Window
                loginWindow = new LoginWindow();
                loginWindow.setLocationRelativeTo(this);
                loginWindow.setVisible(true);

                // dispose of this Object and return resources
                this.dispose();

                break;
            }
            case 1:
                System.exit(0); // Quit
        }
    }//GEN-LAST:event_menuItemLogOutActionPerformed

    private void menuItemVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemVersionActionPerformed
        JOptionPane.showMessageDialog(this, "Creation Date: "
                + creationDate + "\n"
                + "Version: " + version);
    }//GEN-LAST:event_menuItemVersionActionPerformed

    private void menuItemDefaultColumnWidthsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDefaultColumnWidthsActionPerformed
       //restores the selected table to columns to default width
       getSelectedTab().setDefaultColumnWidth(); 
    }//GEN-LAST:event_menuItemDefaultColumnWidthsActionPerformed
    
    //displays an alert message for any incogruencies between
    //the column names in the database and the column name constants stored in TableConstants.java
    public void displayColumnAlert(){
        tableColumnAlert.displayAlert(logWindow);
    }
    
    private void menuItemObjectTableActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        //Wei 2016/07/03 using the same functions designed for loading matches or noMatchs and csv reading. 
        //loadltableojects("select * from tableObjects");
        
        TableObjectsDisplayWindow tableobjectswindow = new TableObjectsDisplayWindow();        
        tableobjectswindow.setLocation(200,200);
        tableobjectswindow.setVisible(true);
        tableobjectswindow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }                                                   
    
  
   
    
    private void reloadDataAction() {
        // reload modified table data into dropdown list
        getSelectedTab().loadTables();
    }
    
    
    /**
     * setScrollBarFormat This formats the scroll bar so that it is always
     * visible. This fixes the default behavior because the scrollbar becomes
     * smaller and smaller until it disappears.
     *
     * @param scroll
     */
    private void setScrollBarFormat(JScrollPane scroll, JTable table) {

        scroll.setViewportView(table);
        scroll.setPreferredSize(new Dimension(924, 900));
    }

    
     //set the timer for information Label show
      private void startCountDownFromNow(int waitSeconds) {
        Timer timer = new Timer(waitSeconds * 1000, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                informationLabel.setText("v."+version);
            }
        });
        timer.setRepeats(false);
        timer.start();
    }

    
   
    /*called by setRecordSelectedListener when Tab attribute recordSelected changes state
    (recordSelected changes when a table's listener calls the setRecordSelected method).
    This method enables the View Record option on the view menu tab when a row is selected
    by Corinne Martus  7/7/2016 */
    private void enableMenuItemAViewATrades(){
        if(getSelectedTab().getSelectedTable().getSelectedRow() != -1){
            menuItemAViewATrades.setEnabled(true);
        }
        
    }
    
    /*called by selectTable to disable
    the View Record option on the view menu tab when a row is not selected 
    (this is the case when the table selection is changed)
    by Corinne Martus  7/7/2016 */
    private void disableMenuItemAViewATrades(){
        if(getSelectedTab().getSelectedTable().getSelectedRow() == -1){
            menuItemAViewATrades.setEnabled(false);
        }
    }
    
    /**
     * applyDateRangeFilter
     */
    private void applyDateRangeFilter() {
        String startDate = textFieldStartDate.getText();
        String endDate = textFieldEndDate.getText();
        String errorMsg = "Not a valid ";
        boolean isError = false;
        Component component = this;
        Date startDateRange = null;
        Date endDateRange = null;

        if (Validator.isValidDate(startDate)) {
            if (Validator.isValidDate(endDate)) {
                // parse the dates
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
                try {
                    startDateRange = simpleDateFormat.parse(startDate);
                    endDateRange = simpleDateFormat.parse(endDate);
                    
                    // apply checkbox selection
                    //boolean isFiltering = filter.isDateRangeFiltering();
                    checkBoxDateRange.setSelected(true);
                    
                    //apply filter
                    getSelectedTab().filterByDate(startDateRange, endDateRange);
                } catch (ParseException e) {
                    LoggingAspect.afterThrown(e);
                }
            } else {
                isError = true;
                errorMsg += "end date range";
                component = textFieldEndDate;
            }
        } else {
            isError = true;
            errorMsg += "start date range";
            component = textFieldStartDate;
        }

        if (isError) {
            errorMsg += "\nDate format not correct: YYYY-MM-DD";
            JOptionPane.showMessageDialog(component, errorMsg);
            checkBoxDateRange.setSelected(false);
        }
    }
    
    //apply symbol search filter.
    private void applySymbolSearchFilter(){ 
        //get the symbol to filter by
        String filterItem = textFieldSymbol.getText();
        
        // apply filter for the symbol
        getSelectedTab().filterBySymbol(filterItem);
        checkBoxSymbol.setSelected(true);
    }
    
    /**
     * print prints the component passed (either JFrame or JPanel)
     *
     * @param component
     */
    private void print(Component component) {

        PrinterJob job = PrinterJob.getPrinterJob();

        if (component instanceof JFrame) {
            job.setPrintable(new PrintWindow((JFrame) component));
        } else if (component instanceof JPanel) {
            job.setPrintable(new PrintWindow((JPanel) component));
        }

        boolean ok = job.printDialog();
        if (ok) {
            try {
                job.pageDialog(job.defaultPage());
                LoggingAspect.addLogMsgWthDate("Start to print the display window...");
                job.print();
                LoggingAspect.addLogMsgWthDate(job.getJobName()
                        + " is successfully printed!\n");
            } catch (PrinterException ex) {
                LoggingAspect.afterThrown(ex);
            }
        }
    }

    //Displays the correct table depending on the tab and button selected
    private void displaySelectedTable() {
          // get the selected JTable
        JTable table = getSelectedTab().getSelectedTable();
        JScrollPane scroll = new JScrollPane(table);
        setScrollBarFormat(scroll, table);    // fix issue with scroll bar dissappearing

        // change panel table
        JPanel panel = getSelectedTabPanel();  // accountTable panel used to display the account table
        panel.removeAll();
        panel.setLayout(new BorderLayout());
        panel.add(scroll, BorderLayout.CENTER);

        
        // update records label
        updateRecordsLabel();
    }
    
     //selects and displays the specified table
    private void selectTable(String tableName){
        //set the table as the selected table 
        getSelectedTab().setSelectedTable(tableName);
        
        // update view label
        btnTableDisplayState.setText(getSelectedTab().getView());

        //display the table 
        displaySelectedTable();
        
        // update button colors
        switch (tableName){
            case POSITIONS_TABLE_NAME:
                btnPositions.setBackground(colorBtnSelected);
                btnTrades.setBackground(colorBtnDefault);
                btnAllocations.setBackground(colorBtnDefault);
                break;
            case ALLOCATIONS_TABLE_NAME:
                btnPositions.setBackground(colorBtnDefault);
                btnTrades.setBackground(colorBtnDefault);
                btnAllocations.setBackground(colorBtnSelected);
                break;
            case TRADES_TABLE_NAME:
                // update button colors
                btnPositions.setBackground(colorBtnDefault);
                btnTrades.setBackground(colorBtnSelected);
                btnAllocations.setBackground(colorBtnDefault);
                break;
            default:
                break;
        }
        
        //disable the View Record option on the view menu if no records are selected
        //Corinne Martus 7/7/2016
        disableMenuItemAViewATrades();
        
    }                                            


    /**
     * getSelectedTab Returns the selected Tab
     *
     * @return
     */
     private Tab getSelectedTab() {
        String tabName = getSelectedTabName();
        
        //if the tabs map contains tabName, returns the corresponding tab
        if(tabs.keySet().contains(tabName)){
            return tabs.get(tabName);
        }
        
        // this should never be reached
        else{
            return new Tab();
        }
    }
     

    /**
     * ************************************************************************
     ******************* SETTERS AND GETTERS **********************************
     * ************************************************************************
     */


    public String getDatabase() {
        return database;
    }

    public void setDatabase(String database) {
        this.database = database;
    }
    
    public void setServer(String server){
        this.server = server;
    }

     public void showDatabase() {
        databaseLabel = new JLabel(
            server + "." + database);
        menuBar.add(Box.createHorizontalGlue());
        menuBar.add(databaseLabel);
    }
     
     public JLabel getInformationLabel() {
        return this.informationLabel;
    }

    public void setInformationLabel(String inf, int second) {
        informationLabel.setText(inf);
        startCountDownFromNow(second);
    }
     
    public static ELLE_GUI_Frame getInstance() {
        return instance;
    }

    public void setLogWindow(LogWindow logWindow) {

        this.logWindow = logWindow;
        
        //registers a listener for the window closing on logWindow
        //Used to select/unselect log menu item checkbox
        setLogWindowListener();
        
        
    }

    private String getSelectedTabName() {
        return tabbedPaneAccounts.getTitleAt(tabbedPaneAccounts.getSelectedIndex());
    }

    private JPanel getSelectedTabPanel() {

        // not sure of the i of the table
        //return (JTable)tabbedPaneAccounts.getComponentAt(0);
        // temporary test code
        String tabName = getSelectedTabName();

        switch (tabName) {
            case IB9048_ACCOUNT_NAME:
                return panelIB9048;
            case TOS3622_ACCOUNT_NAME:
                return panelTOS3622;
            default:
                return panelCombined;
        }
    }
    
    
    
   
    
    // creates a propertyChangeListener to disable/enable menuItemAViewATrades 
    //when the table record selection state changes
    private void setRecordSelectedListener(){
        recordSelectedListener = new PropertyChangeListener(){
            @Override
            public void propertyChange(PropertyChangeEvent evt){
                if ((boolean)evt.getNewValue()== false){
                    disableMenuItemAViewATrades();
                }
                else{
                    enableMenuItemAViewATrades();
                }
            } 
        };
        //add listener to each tab
        for(Tab tab: tabs.values()){
            tab.addRecordSelectedChangeListener(recordSelectedListener);
        }
    }
    
    /*Creates a propertyChangeListener to select/deselect menuItemCheckBoxLog 
    when the log window is closed/opened. Listens for changes to LogWindow attribute windowOpen
    */
    
    private void setLogWindowListener (){
       logWindowClosedListener = new PropertyChangeListener(){
            @Override
            public void propertyChange(PropertyChangeEvent evt){
                if(evt.getNewValue().equals(true)){
                menuItemCheckBoxLog.setSelected(true);   
                }
                else if(evt.getNewValue().equals(false)){
                    menuItemCheckBoxLog.setSelected(false);
                }
            }
       };
       
       logWindow.addLogWindowClosedListener(logWindowClosedListener);
    }
    
        /*creates a propertyChangeListener to update the records label when 
        the number of records displayed in the selected table increase.
        Listens for changes to Tab attribute recordsChange
        Corinne 8/4/16 */
        private void setRecordsChangedListener(){
            recordsChangedListener = new PropertyChangeListener(){
            @Override
            public void propertyChange(PropertyChangeEvent evt){
                
                // unselected symbol checkbox if the symbol column was unselected
                //This happens when filter method clearFilterByDoubleClick is called on the symbol column
                if ((int) evt.getNewValue() == 1) {
                    checkBoxSymbol.setSelected(false);
                } 
                // unselected date checkbox if the date column was unselected
                //This happens when filter method clearFilterByDoubleClick is called on the date column
                else if((int) evt.getNewValue() == 0){
                    checkBoxDateRange.setSelected(false);
                }
//                //unselect both the date and symbol checkboxes. 
//                //This happens when btnClearAllFilters is selected
//                else if ((int) evt.getNewValue() == 1){
//                   checkBoxSymbol.setSelected(false); 
//                   checkBoxDateRange.setSelected(false);
//                }
                updateRecordsLabel();
            } 
        };
        
         //add listener to each tab
        for(Tab tab: tabs.values()){
           tab.addRecordsChangedListener(recordsChangedListener); 
        }  
    }
    
    //updates labelRecordsShow and labelTotalRecords
    private void updateRecordsLabel(){
        // set labelRecordsShown text
        String recordsShownLabel = getSelectedTab().getRecordsShownLabel();
        labelRecordsShown.setText(recordsShownLabel);
        labelRecordsShown.repaint(); 
        
        // set labelTotalRecords text
        String totalRecordsLabel = getSelectedTab().getTotalRecordsLabel();
        labelTotalRecords.setText(totalRecordsLabel);
        labelTotalRecords.repaint(); 
    }
    
    private void initTabs(){
        for(String accountName: ACCOUNT_NAMES){
            Tab tab = new Tab(accountName);
            tabs.put(accountName, tab);
        }
        setInformationLabel("Tables loaded succesfully", 10);
    }

    @SuppressWarnings("unused")
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllocations;
    private java.awt.Button btnClearAllFilters;
    private javax.swing.JButton btnClearSQL;
    private javax.swing.JButton btnDateRange;
    private javax.swing.JButton btnEnterSQL;
    private javax.swing.JButton btnPositions;
    private javax.swing.JButton btnShowTables;
    private javax.swing.JButton btnSymbol;
    private javax.swing.JLabel btnTableDisplayState;
    private javax.swing.JButton btnTrades;
    private javax.swing.JCheckBox checkBoxDateRange;
    private javax.swing.JCheckBox checkBoxSymbol;
    private javax.swing.JFileChooser filechooser;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel labelHyphen;
    private javax.swing.JLabel labelRecordsShown;
    private javax.swing.JLabel labelTotalRecords;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuConnections;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuFind;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemAViewATrades;
    private javax.swing.JMenuItem menuItemAWS;
    private javax.swing.JMenuItem menuItemBackup;
    private javax.swing.JCheckBoxMenuItem menuItemCheckBoxLog;
    private javax.swing.JCheckBoxMenuItem menuItemCheckBoxSQL;
    private javax.swing.JMenuItem menuItemConnection;
    private javax.swing.JMenuItem menuItemDefaultColumnWidths;
    private javax.swing.JMenuItem menuItemIB;
    private javax.swing.JMenuItem menuItemIB8949;
    private javax.swing.JMenuItem menuItemLoadFile;
    private javax.swing.JMenuItem menuItemLoadsTable;
    private javax.swing.JMenuItem menuItemLocal;
    private javax.swing.JMenuItem menuItemLogOut;
    private javax.swing.JMenuItem menuItemPrintDisplayWindow;
    private javax.swing.JMenuItem menuItemPrintGUI;
    private javax.swing.JMenuItem menuItemPupone;
    private javax.swing.JMenuItem menuItemRead;
    private javax.swing.JMenuItem menuItemReconcile;
    private javax.swing.JMenuItem menuItemReloadTabData;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenuItem menuItemTL;
    private javax.swing.JMenuItem menuItemTL8949;
    private javax.swing.JMenuItem menuItemVersion;
    private javax.swing.JMenu menuLoad;
    private javax.swing.JMenu menuOther;
    private javax.swing.JMenu menuPrint;
    private javax.swing.JMenu menuReports;
    private javax.swing.JMenu menuTools;
    private javax.swing.JMenu menuView;
    private javax.swing.JPanel panelAccounts;
    private javax.swing.JPanel panelCTRLPanel;
    private javax.swing.JPanel panelCombined;
    private javax.swing.JPanel panelIB9048;
    private javax.swing.JPanel panelSQL;
    private javax.swing.JPanel panelTOS3622;
    private javax.swing.JScrollPane scrollPaneCombined;
    private javax.swing.JScrollPane scrollPaneIB9048;
    private javax.swing.JScrollPane scrollPaneSQL;
    private javax.swing.JScrollPane scrollPaneTOS3622;
    private javax.swing.JTabbedPane tabbedPaneAccounts;
    private javax.swing.JTable tableCombined;
    private javax.swing.JTable tableIB9048;
    private javax.swing.JTable tableTOS3622;
    private javax.swing.JTextArea textAreaSQL;
    private javax.swing.JTextField textFieldEndDate;
    private javax.swing.JTextField textFieldStartDate;
    private javax.swing.JTextField textFieldSymbol;
    private javax.swing.JMenuItem viewmatches;
    private javax.swing.JMenuItem viewnomatches;
    // End of variables declaration//GEN-END:variables

}

